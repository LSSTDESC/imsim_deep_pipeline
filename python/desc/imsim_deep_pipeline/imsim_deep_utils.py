"""
Utilities for the imsim_deep pipeline python code.
"""
from __future__ import absolute_import
import os
import itertools
import pickle
from collections import namedtuple, defaultdict
import lsst.obs.lsstSim as obs_lsstSim
from lsst.sims.coordUtils import raDecFromPixelCoords
from lsst.sims.photUtils import LSSTdefaults
from lsst.sims.utils import ObservationMetaData
import desc.imsim
from .instcat_utils import sky_cone_select

__all__ = ['get_visit_info', 'SensorLists', 'obs_metadata', 'trim_instcat']

VisitInfo = namedtuple('VisitInfo',
                       ('obsHistId', 'instcat_file', 'instcat_radius'))


def get_visit_info():
    """
    Get the desired obsHistId, as set by the driving jython script and
    build the instance catalog filepath.

    Returns
    -------
    tuple : obsHistId, instcat_file, instcat_radius
    """
    obsHistId = int(os.environ['OBSHISTID'])
    lsst_band = os.environ['LSST_BAND']
    instcat_radius = float(os.environ['INSTCAT_RADIUS'])
    instcat_dir = os.path.join(os.environ['OUTPUT_DATA_DIR'],
                               '%07i' % obsHistId)
    if not os.path.isdir(instcat_dir):
        os.mkdir(instcat_dir)
    instcat_file = os.path.join(instcat_dir, 'instcat_%07i_%s_%.1f.txt'
                                % (obsHistId, lsst_band, instcat_radius))
    return VisitInfo(obsHistId, instcat_file, instcat_radius)


def get_invalid_sensor_visit_dict(infile):
    """
    Generate a dictionary of lists of chip names keyed by obsHistID
    from the list of invalid FITS files.

    Parameters
    ----------
    infile : str
        The list of invalid FITS files generated by examine_imsim_jobs.py.

    Returns
    -------
    defaultdict
        A dictionary of lists of chip names keyed by obsHistID.
    """
    visits = defaultdict(list)
    with open(infile) as fobj:
        for line in fobj:
            filename = os.path.basename(line.strip())
            tokens = filename.split('_')
            if len(tokens) == 1:
                continue
            obsHistID = int(tokens[2])
            sensor_id = '%s:%s,%s %s:%s,%s' % tuple(tokens[3:9])
            visits[obsHistID].append(sensor_id)
    return visits


class SensorLists(object):
    """
    Functor class to provide lists of sensors to simulate as a function
    of obsHistID.
    """

    def __init__(self, dither_info_file=None, missing_fits_files=None):
        """
        Constructor.

        Parameters
        ----------
        dither_info_file : str, optional
            Name of pickle file containing the list of chips per visit
            for a dithered observing schedule.  If None (default), then
            the missing_fits_files keyword argument is considered.
        missing_fits_files : str, optional
            File containing a list of the full paths to the missing or
            invalid FITS eimages.  If None (default), then have the __call__
            function return all science sensors in the focal plane.
        """
        if dither_info_file is not None:
            dither_info = pickle.load(dither_info_file)
            self.visits = dict([kv for kv in zip(dither_info['obsHistID'],
                                                 dither_info['chipNames'])])
        if missing_fits_files is not None:
            self.visits = get_invalid_sensor_visit_dict(missing_fits_files)
        else:
            self.visits = None
            self.sensors = self._all_sensors()

    def __call__(self, obsHistID):
        """
        The names of the sensors in the LSST focal plane to be
        simulated for a specfied obsHistID.

        Parameters
        ----------
        obsHistID : int
            The id of the desired visit from the OpSim db file.

        Returns
        -------
        list
            A list of the sensor ids, e.g., 'R:2,2 S:1,1'.  Corner raft
            sensors are excluded.
        """
        if self.visits is None:
            return self.sensors
        return self.visits[obsHistID]

    def _all_sensors(self):
        """
        Returns
        -------
        list
            all of the sensors in the focal plane.
        """
        corners = ((0, 0), (0, 4), (4, 0), (4, 4))
        raft_ids = ['R:%i,%i' % x for x in itertools.product(range(5), range(5))
                    if x not in corners]
        sensor_ids = ['S:%i,%i' % x for x in
                      itertools.product(range(3), range(3))]
        return [' '.join(x) for x in itertools.product(raft_ids, sensor_ids)]


def obs_metadata(commands):
    """
    Create an ObservationMetaData instance from phosim commands.
    Parameters
    ----------
    commands : dict
        Dictionary of phosim instance catalog commands.
    Returns:
    lsst.sims.utils.ObservationMetaData
    """
    return ObservationMetaData(pointingRA=commands['rightascension'],
                               pointingDec=commands['declination'],
                               mjd=commands['mjd'],
                               rotSkyPos=commands['rotskypos'],
                               bandpassName=commands['bandpass'],
                               m5=LSSTdefaults().m5(commands['bandpass']),
                               seeing=commands['seeing'])


def trim_instcat(chipname, obs_par_file, object_file, outfile, radius=0.18):

    """Trim an instance catalog of objects to an acceptance cone centered
    on the specified sensor.  The observing parameters will be extracted
    from the obs_par_file, which can be the same as object_file.

    Parameters
    ----------
    chipname : str
        The name of the sensor, e.g., 'R:2,2 S:1,1'.
    obs_par_file : str
        The filename of the instance catalog containing the desired
        observing parameters.
    object_file : str
        The filename of the instance catalog containing the objects to
        be trimmed.
    outfile : str
        The output filename for the trimmed instance catalog data.
    radius : float, optional
        The radius of the acceptance cone in degrees.  Default: 0.18;
        this includes some buffer to account for differing pixel
        geometries for ITL vs e2v sensors.
    """
    camera = obs_lsstSim.LsstSimMapper().camera
    instcat = desc.imsim.parsePhoSimInstanceFile(obs_par_file, numRows=100)
    obs_md = obs_metadata(instcat.commands)
    # Get the chip sensor coordinates in degrees.
    ra, dec = raDecFromPixelCoords(2036, 2000, chipname, camera=camera,
                                   obs_metadata=obs_md)
    sky_cone_select(obs_par_file, object_file, ra, dec, radius, outfile)
