#!/usr/bin/env python
"""
Run imsim.py on the instance catalog for the current visit and
for the desired sensor.
"""
from __future__ import absolute_import, print_function
import os
import sys
import re
import logging
import subprocess
import desc.imsim_deep_pipeline

logging.basicConfig(format="run_imsim: %(message)s", level=logging.INFO,
                    stream=sys.stdout)
logger = logging.getLogger()

dither_info_file = os.environ['DITHER_INFO_FILE']
missing_fits_files = os.environ['MISSING_FITS_FILES']
if os.path.isfile(dither_info_file):
    sensors = desc.imsim_deep_pipeline.SensorLists(dither_info_file=dither_info_file)
elif os.path.isfile(missing_fits_files):
    sensors = desc.imsim_deep_pipeline.SensorLists(missing_fits_files=missing_fits_files)
else:
    sensors = desc.imsim_deep_pipeline.SensorLists()

visit_info = desc.imsim_deep_pipeline.get_visit_info()
print("Number of sensors found for this visit:",
      len(sensors(visit_info.obsHistId)))

sensor_number = int(os.environ['SENSOR_NUMBER'])

try:
    sensor_id = sensors(visit_info.obsHistId)[sensor_number]
except IndexError:
    print("This sensor-visit was already successfully simulated. Exiting")
    sys.exit(0)

sensor_id_slug = re.sub('[:, ]', '_', sensor_id)
output_dir = os.path.join(os.environ['OUTPUT_DATA_DIR'],
                          '%07i' % visit_info.obsHistId,
                          sensor_id_slug)
if not os.path.isdir(output_dir):
    os.makedirs(output_dir)

cache_file \
    = os.path.join(os.environ['OUTPUT_DATA_DIR'], 'object_cache_info.pkl')
cache_info = desc.imsim_deep_pipeline.ObjectCacheInfo.load(cache_file)

instcat_file = os.path.join(output_dir, 'instcat_' + sensor_id_slug + '.txt')
obs_par_file = visit_info.instcat_file
#object_file = cache_info.get_object_files(obs_par_file,
#                                          visit_info.instcat_radius)[0]
object_file = cache_info.get_nearest_object_file(obs_par_file)
logger.info("object_file: %s", object_file)
desc.imsim_deep_pipeline.trim_instcat(sensor_id, obs_par_file, object_file,
                                      instcat_file)

command = ('imsim.py %s --outdir %s --sensor "%s" --log_level DEBUG'
           % (instcat_file, output_dir, sensor_id))
logger.info("running %s", command)
subprocess.check_call(command, shell=True)

command = "gzip -f %s/lsst_e*_%s*.fits" % (output_dir, sensor_id_slug)
logger.info("running %s", command)
subprocess.check_call(command, shell=True)

logger.info("deleting %s" % instcat_file)
os.remove(instcat_file)
