#!/usr/bin/env python
"""
Run imsim.py on the instance catalog for the current visit and
for the desired sensor.
"""
from __future__ import absolute_import, print_function
import os
import sys
import re
import logging
import subprocess
import desc.imsim_deep_pipeline

logging.basicConfig(format="run_imsim: %(message)s", level=logging.INFO,
                    stream=sys.stdout)
logger = logging.getLogger()

visit_info = desc.imsim_deep_pipeline.get_visit_info()
sensor_number = int(os.environ['SENSOR_NUMBER'])
sensor_id = desc.imsim_deep_pipeline.sensors()[sensor_number]
sensor_id_slug = re.sub('[:, ]', '_', sensor_id)
output_dir = os.path.join(os.environ['OUTPUT_DATA_DIR'],
                          '%07i' % visit_info.obsHistId,
                          sensor_id_slug)
if not os.path.isdir(output_dir):
    os.makedirs(output_dir)

try:
    instcat_file = os.path.join(output_dir, 'instcat_' + sensor_id_slug
                                + '.txt')
    desc.imsim_deep_pipeline.trim_instcat(sensor_id, visit_info.instcat_file,
                                          instcat_file)
except ImportError as eObj:
    logger.info(str(eObj))
    instcat_file = visit_info.instcat_file

command = ('imsim.py %s --outdir %s --sensor "%s" --log_level DEBUG'
           % (instcat_file, output_dir, sensor_id))
logger.info("running %s", command)
subprocess.check_call(command, shell=True)

command = "gzip %s/lsst_e*.fits" % output_dir
logger.info("running %s", command)
subprocess.check_call(command, shell=True)

logger.info("deleting %s" % instcat_file)
os.remove(instcat_file)
